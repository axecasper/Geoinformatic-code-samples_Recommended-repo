%epoch=18480
function [deneme]= proje(epoch)
format long g
%ýnput values
a=6378137; 
b=6356752.3;
c = 299792458;
MERS=[4239146.6414  2886967.1245  3778874.4800];


    Matrix(:,:,1)=[02 -0.431794673204D-03 -0.659383658785D-11 0.000000000000D+00;
    0.800000000000D+02 -0.686250000000D+02 0.457876215239D-08 -0.213249742209D+01;
   -0.329501926899D-05 0.197792183608D-01 0.596977770328D-05 0.515366853142D+04;
    0.273600000000D+06 0.234693288803D-06 -0.228263241237D+01 0.162050127983D-06;
    0.958442519549D+00 0.256718750000D+03 -0.164085401508D+01 -0.785747015231D-08;
    0.155720772110D-09 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 -0.176951289177D-07 0.800000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(1)= 25231555.823 ;    



    Matrix(:,:,2)=[04 -0.700796954334D-04 -0.522959453519D-11 0.000000000000D+00;
    0.219000000000D+03 0.250000000000D+01 0.464233622908D-08 -0.123477857954D+01;
    0.130385160446D-07 0.649683992378D-03 0.764802098274D-05 0.515369952393D+04;
    0.273600000000D+06 -0.186264514923D-08 -0.877210635801D-01 -0.745058059692D-08;
    0.960339659510D+00 0.232468750000D+03 -0.263949056874D+01 -0.799211861811D-08;
   -0.703600736366D-10 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 -0.419095158577D-08 0.219000000000D+03;
    0.266538000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(2)=23922754.021;



    Matrix(:,:,3)=[05 -0.100787729025D-04 -0.682121026330D-12 0.000000000000D+00;
    0.730000000000D+02 -0.375937500000D+02 0.484698761077D-08 0.529481903092D+00;
   -0.171363353729D-05 0.579938711598D-02 0.886432826519D-05 0.515363016891D+04;
    0.273600000000D+06 -0.502914190292D-07 -0.119745547535D+01 0.633299350738D-07;
    0.951874055409D+00 0.202093750000D+03 0.786458746821D+00 -0.819927010394D-08;
    0.157149403046D-09 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 -0.111758708954D-07 0.730000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(3)=22451786.599;



    Matrix(:,:,4)=[07 -0.248546246439D-03 -0.852651282912D-11 0.000000000000D+00;
    0.112000000000D+03 0.302500000000D+02 0.451411660250D-08 -0.313642454145D+01;
    0.144354999065D-05 0.135289962636D-01 0.878423452377D-05 0.515368140602D+04;
    0.273600000000D+06 -0.260770320892D-07 0.938926159552D+00 -0.130385160446D-06;
    0.953540055777D+00 0.205656250000D+03 -0.241018073747D+01 -0.778639576321D-08;
   -0.231795369493D-09 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 -0.111758708954D-07 0.112000000000D+03;
    0.267762000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(4)=20889500.770;



    Matrix(:,:,5)=[08 -0.291061587632D-04 -0.136424205266D-11 0.000000000000D+00;
    0.110000000000D+02 0.140625000000D+02 0.444554231754D-08 -0.765342211918D-01;
    0.780448317528D-06 0.531659473199D-02 0.407733023167D-05 0.515364564133D+04;
    0.273600000000D+06 0.316649675369D-07 0.300677238361D+01 0.204890966415D-07;
    0.970103642905D+00 0.303000000000D+03 -0.123660839748D+00 -0.827570185906D-08;
    0.110004582132D-09 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 0.512227416039D-08 0.110000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(5)=24359879.080;    
  


    Matrix(:,:,6)=[09 -0.188551377505D-03 -0.795807864051D-11 0.000000000000D+00;
    0.540000000000D+02 0.103125000000D+01 0.485948813147D-08 0.119694639156D+00;
   -0.149011611938D-07 0.161791814025D-02 0.752508640289D-05 0.515375764465D+04;
    0.273600000000D+06 -0.186264514923D-07 -0.135169433412D+00 0.167638063431D-07;
    0.953029863096D+00 0.229718750000D+03 0.180170591018D+01 -0.814962517889D-08;
   -0.428589281035D-10 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 0.139698386192D-08 0.540000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(6)=21351722.419 ;



    Matrix(:,:,7)=[27 -0.254467129707D-03 -0.105728759081D-10 0.000000000000D+00;
    0.890000000000D+02 0.128437500000D+02 0.430517932800D-08 -0.246858022239D+00;
    0.784173607826D-06 0.812588725239D-02 0.399537384510D-05 0.515366077232D+04;
    0.273600000000D+06 0.316649675369D-07 0.302060088301D+01 0.130385160446D-06;
    0.978513678062D+00 0.312000000000D+03 0.528842332863D+00 -0.824141471657D-08;
    0.950039572962D-10 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 0.139698386192D-08 0.890000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(7)= 24932824.640 ;



    Matrix(:,:,8)=[28 0.728746410459D-03 -0.284217094304D-11 0.000000000000D+00;
    0.140000000000D+02 0.566875000000D+02 0.410195657724D-08 0.479655328781D+00;
    0.294856727123D-05 0.185006565880D-01 0.687129795551D-05 0.515367000771D+04;
    0.273600000000D+06 -0.201165676117D-06 0.206730951745D+01 -0.167638063431D-06;
    0.978055486268D+00 0.258125000000D+03 -0.141129002228D+01 -0.825927260328D-08;
   -0.346443002170D-10 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 -0.111758708954D-07 0.140000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(8)=22653202.271 ;



    Matrix(:,:,9)=[30 -0.188334379345D-03 -0.852651282912D-11 0.000000000000D+00;
    0.520000000000D+02 0.354062500000D+02 0.492627662777D-08 0.313635075917D+01;
    0.179931521416D-05 0.441727566067D-02 0.835768878460D-05 0.515367037964D+04;
    0.273600000000D+06 -0.447034835815D-07 0.962446889136D+00 0.558793544769D-08;
    0.938861440056D+00 0.207125000000D+0 -0.291656867637D+01 -0.814426781287D-08;
   -0.264296723305D-09 0.100000000000D+01 0.209900000000D+04 0.000000000000D+00;
    0.200000000000D+01 0.000000000000D+00 0.372529029846D-08 0.520000000000D+02;
    0.266418000000D+06 0.400000000000D+01 0.000000000000D+00 0.000000000000D+00];
    pseudorange(9)=20951453.885;

%matrix elements
emit=[];
err=[];
for i=1:9
    a0=Matrix(1,2,i);
    a1=Matrix(1,3,i);
    a2=Matrix(1,4,i);

    iode=Matrix(2,1,i);
    Crs=Matrix(2,2,i);
    dn=Matrix(2,3,i);
    M0=Matrix(2,4,i);

    Cuc=Matrix(3,1,i);
    e=Matrix(3,2,i);
    Cus=Matrix(3,3,i);
    koka=Matrix(3,4,i);

    toe=Matrix(4,1,i);
    Cic=Matrix(4,2,i);
    omega0=Matrix(4,3,i);
    Cis=Matrix(4,4,i);

    i0=Matrix(5,1,i);
    Crc=Matrix(5,2,i);
    W=Matrix(5,3,i);
    omegadot=Matrix(5,4,i);

    TGD=Matrix(7,3,i);

    %emission time
    to1=14400;
    fark=epoch-to1;
    terror=a0+(a1*(fark))+(a2*(fark)^2); %clock error
    emission=epoch-(pseudorange(i)/c)-terror; %emission time
    err=[err,terror];
    emit=[emit,emission];
    %sat coordinate estimation from ephemeris file
    mu = 3.986005 * 10^14 ;
    gode = 7.2921151467 * 10^(-5);
    t=emission+3*86400; 
    tk = t - toe; %emission time'a göre xyz hesaplanacak
    A=koka^2;
    n0=sqrt(mu/(A^3));
    n=n0+dn;
    mk=M0+n*tk;

    trye_solve=0;
    Ek1 = mk;

    while trye_solve == 0 
        Ek2=mk+e*sin(Ek1);
        if abs(Ek2 - Ek1) < 0.00001
            trye_solve = 1; 
        else
            Ek1 = Ek2;
        end
    end   

    fk=atan2((sqrt(1-e^2)*sin(Ek2)),(cos(Ek2)-e));
    tetak=fk+W;

    duk=Cuc*cos(2*tetak)+Cus*sin(2*tetak);
    drk=Crc*cos(2*tetak)+Crs*sin(2*tetak);
    dik=Cic*cos(2*tetak)+Cis*sin(2*tetak);
    uk=tetak+duk;
    rk=A*(1-e*cos(Ek2))+drk;
    ik=i0+dik+iode*tk; %this formula is wrong so i use i0 directly

    x=rk*cos(uk);
    y=rk*sin(uk);

    godk=omega0+(omegadot-gode)*tk-gode*toe;

    %Sat Coordinates
    X=x*cos(godk)-y*cos(i0)*sin(godk);
    Y=x*sin(godk)+y*cos(i0)*cos(godk);
    Z=y*sin(i0);
    Koordinatlar(i,1)=X;
    Koordinatlar(i,2)=Y;
    Koordinatlar(i,3)=Z;
    %earth rotation hesaba katýlarak uydu koordinatlarý
    yenipseudo=sqrt((MERS(1)-X)^2+(MERS(2)-Y)^2+(MERS(3)-Z)^2);
    deltat2=yenipseudo/c;
    omega=gode*deltat2;

    R3 = [cos(omega) sin(omega) 0;-sin(omega) cos(omega) 0;0 0 1];
    Coordinates(i,:)=(transpose(R3*transpose(Koordinatlar(i,:))));
end   
disp(Coordinates)
    %%%%
    %xyz to lat lon h converter for station MERS
    f=(a-b)/a;
    ekare=2*f-f^2;
    lambda=atand(MERS(2)/MERS(1)); 
    p=sqrt(MERS(1)^2+MERS(2)^2);
    fiapprox=atand(MERS(3)/p*((1-ekare))^-1);
    u=0;
    N=a/sqrt(1-ekare*(sind(fiapprox).^2));
    h=(p/cosd(fiapprox))-N;
    fii=atand(MERS(3)/p*((1-ekare*(N/(N+h)))^-1));

    while u==0
        if abs(fii-fiapprox)>10^-12
            N=a/sqrt(1-ekare*(sind(fii).^2));
            h=(p/cosd(fii))-N;
            fii=atand(MERS(3)/p*((1-ekare*(N/(N+h)))^-1));
            u=~0;
            disp('h is =')
            disp(h);
            disp('fii is =')
            disp(fii);
            disp('lambda is =')
            disp(lambda);
        else
            fii=fiapprox;
        end
    end
 

%L=[];
di=[];
for i=1:9
     TGD=Matrix(7,3,i);
     %azimuth zenith calculation
     A=[-sind(fii)*cosd(lambda) -sind(lambda) cosd(fii)*cosd(lambda); -sind(fii)*sind(lambda) cosd(lambda) cosd(fii)*sind(lambda); cosd(fii) 0 sind(fii)];
     DX=[Coordinates(i,1)-MERS(1); Coordinates(i,2)-MERS(2); Coordinates(i,3)-MERS(3)];
     S=sqrt((Coordinates(i,1)-MERS(1))^2+(Coordinates(i,2)-MERS(2))^2+(Coordinates(i,3)-MERS(3))^2);  
     dx=transpose(A)*DX;
     zenith(1,i)=acosd(dx(3,1)/S);
     azimuth(1,i)=atan2d(dx(2,1),dx(1,1));

    radian_lat=fii*pi/180;
    radian_lon=lambda*pi/180;
    radian_elev(1,i)=zenith(1,i)*pi/180; 
    radian_azimuth(1,i)=azimuth(1,i)*pi/180;

    alpha=[0.1118D-07  0.7451D-08 -0.5960D-07 -0.5960D-07 ];
    beta=[0.9011D+05  0.1638D+05 -0.1966D+06 -0.6554D+05];

    [gpsweek, tgps]=cal2gpstime(20,04,01,18480);
    dion(1,i)=cal_klob(radian_lat,radian_lon,radian_elev(1,i),radian_azimuth(1,i),alpha,beta,tgps);
    di=[di,dion(1,i)];
    
end
disp(zenith)
disp(azimuth)
disp(di)
%Least square adjustment
dbstop if naninf
x_0=0;
y_0=0;
z_0=0;
try_solve=0
while try_solve==0  
    for i=1:9
        %with and without tgd and ionospheric effect
        %Dj(1,i)=c*(-err(1,i));
        Dj(1,i)=c*(-err(1,i))+di(1,i)+c*TGD;
        
        Rj(1,i)=c*(epoch-emit(1,i));
        
        ro0(1,i)=sqrt((Coordinates(i,1)-x_0)^2+(Coordinates(i,2)-y_0)^2+(Coordinates(i,3)-z_0)^2);
        
        L(i,1)=Rj(1,i)-Dj(1,i)-ro0(1,i);
        
        A(i,1)=((x_0-Coordinates(i,1))/ro0(1,i));
        A(i,2)=((y_0-Coordinates(i,2))/ro0(1,i));
        A(i,3)=((z_0-Coordinates(i,3))/ro0(1,i));
        A(i,4)=1;       
    end
    %disp(A)
    unknown=(transpose(A)*A)^-1*transpose(A)*L; %A=9x4 and L=1x9 matrix. I make A 4x9 and L 9x1 and so result will be 4x1
    
    %disp(unknown)
    if sqrt((unknown(1,1)^2+unknown(2,1)^2+unknown(3,1)^2))<0.001
    %if abs(unknown(1,1))<0.001 & abs(unknown(2,1))<0.001 & abs(unknown(3,1))<0.001
        try_solve=1
        disp(unknown)
    else
        x_0=x_0+unknown(1,1);
        y_0=y_0+unknown(2,1);
        z_0=z_0+unknown(3,1);
    end   
end   

Xfinal=MERS(1)+unknown(1,1)
Yfinal=MERS(2)+unknown(2,1)
Zfinal=MERS(3)+unknown(3,1)
dt=unknown(4,1)/c
sqrt((Xfinal-4239149.23905405)^2+(Yfinal- 2886968.03012480)^2+(Zfinal-3778877.17820202)^2)

